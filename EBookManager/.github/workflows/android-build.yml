name: Android APK Build

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-android-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        build-tools: 33.0.0
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-
    
    - name: Install npm dependencies
      run: npm ci
    
    - name: Create gradle wrapper
      run: |
        cd android
        gradle wrapper --gradle-version 8.0.1
    
    - name: Make gradlew executable
      run: chmod +x android/gradlew
    
    - name: Clean project
      run: |
        cd android
        ./gradlew clean
    
    - name: Build Debug APK
      run: |
        cd android
        ./gradlew assembleDebug
        
    - name: Build Release APK
      run: |
        cd android
        ./gradlew assembleRelease
        
    - name: Sign APK (if keystore provided)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd android
        if [ -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > app/release.keystore
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app/release.keystore \
            -Pandroid.injected.signing.store.password="${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.ANDROID_KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.ANDROID_KEY_PASSWORD }}"
        fi
    
    - name: List build outputs
      run: |
        echo "=== Debug APK ==="
        find android/app/build/outputs/apk/debug -name "*.apk" -type f || echo "No debug APK found"
        echo "=== Release APK ==="
        find android/app/build/outputs/apk/release -name "*.apk" -type f || echo "No release APK found"
        
    - name: Upload Debug APK
      uses: actions/upload-artifact@v3
      with:
        name: android-debug-apk
        path: android/app/build/outputs/apk/debug/*.apk
        if-no-files-found: warn
        
    - name: Upload Release APK
      uses: actions/upload-artifact@v3
      with:
        name: android-release-apk
        path: android/app/build/outputs/apk/release/*.apk
        if-no-files-found: warn
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release APK to GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: android/app/build/outputs/apk/release/app-release.apk
        asset_name: EBookManager-${{ github.ref_name }}.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Notify build status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Android APK构建成功！"
          echo "📁 可在Actions页面下载APK文件"
        else
          echo "❌ Android APK构建失败"
        fi